ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(34)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(34)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(34)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(1234)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(1234)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(1234)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
#write_xlsx(as.data.frame(rf_model_arg$importance), "arg_gini.xlsx")
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(1996)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(1996)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(1996)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(24)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(24)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(24)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(5)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(5)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(5)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(34)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(34)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(34)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
df<-read_xlsx("Supplementary_Data_1.xlsx", sheet = "detailed_dataframe")
df_lineage = df[, c(2, 22:351)]
df_location = df[, c(3, 22:351)]
df_arg = df[, c(6, 22:351)]
df_lineage$Lineage<-as.factor(df_lineage$Lineage)
df_location$Location<-as.factor(df_location$Location)
df_arg$`No ARG`<-as.factor(df_arg$`No ARG`)
#divide set into testing set and training set
set.seed(5)
split = sample.split(df_lineage$Lineage, SplitRatio = 0.80)
training_set1 = subset(df_lineage, split == TRUE)
testing_set1 = subset(df_lineage, split == FALSE)
set.seed(36)
split = sample.split(df_location$Location, SplitRatio = 0.80)
training_set2 = subset(df_location, split == TRUE)
testing_set2 = subset(df_location, split == FALSE)
set.seed(34)
split = sample.split(df_arg$`No ARG`, SplitRatio = 0.80)
training_set3 = subset(df_arg, split == TRUE)
testing_set3 = subset(df_arg, split == FALSE)
# RF models
rf_model_lineage <- randomForest(Lineage ~., data = training_set1,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_location <- randomForest(Location ~., data = training_set2,
ntree=501, importance=T, confusion=T, err.rate=T)
rf_model_arg <- randomForest(`No ARG` ~., data = training_set3,
ntree=501, importance=T, confusion=T, err.rate=T)
#Kappa test
pred_test_class1 <- predict(rf_model_lineage, testing_set1,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm1<-confusionMatrix(pred_test_class1, testing_set1$Lineage)
table1<-Cm1$table
pred_test_class2 <- predict(rf_model_location, testing_set2,
type="class", norm.votes=TRUE, predict.all=FALSE,
proximity=FALSE, nodes=FALSE)
Cm2<-confusionMatrix(pred_test_class2, testing_set2$Location)
table2<-Cm2$table
pred_test_class3 <- predict(rf_model_arg, testing_set3,
type="class", norm.votes=TRUE,
predict.all=FALSE, proximity=FALSE, nodes=FALSE)
Cm3<-confusionMatrix(pred_test_class3, testing_set3$`No ARG`)
table3<-Cm3$table
library(fmsb)
kappa_lineage<-Kappa.test(table1)
kappa_lineage
kappa_location<-Kappa.test(table2)
kappa_location
kappa_arg<-Kappa.test(table3)
kappa_arg
#save output
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
#save output
rank_IS_lineages<-as.data.frame(rf_model_lineage$importance)
rank_lineages<-row.names(rank_IS_lineages)
rank_lineages<-as.data.frame(rank_lineages)
rank_lineages$gini_lineages<-rank_IS_lineages$MeanDecreaseGini
rank_IS_locations<-as.data.frame(rf_model_location$importance)
rank_locations<-row.names(rank_IS_locations)
rank_locations<-as.data.frame(rank_locations)
rank_locations$gini_locations<-rank_IS_locations$MeanDecreaseGini
rank_IS_arg<-as.data.frame(rf_model_arg$importance)
rank_arg<-row.names(rank_IS_arg)
rank_arg<-as.data.frame(rank_arg)
rank_arg$gini_arg<-rank_IS_arg$MeanDecreaseGini
Ginis_scores<-rank_lineages
Ginis_scores$gini_location<-rank_locations$gini_locations
Ginis_scores$gini_arg<-rank_arg$gini_arg
library(writexl)
write_xlsx(Ginis_scores, "Ginis_scores.xlsx")
